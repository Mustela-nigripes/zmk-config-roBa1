#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W         &kp E         &kp R                        &kp T                                                      &kp Y      &kp U  &kp I      &kp O    &kp P
&kp A      &kp S         &kp D         &kp F                        &kp G        &kp LS(LG(S))                  &kp MINUS      &kp H      &kp J  &kp K      &kp L    &lt 0 LEFT_SHIFT
&kp Z      &kp X         &kp C         &kp V                        &kp B        &kp APOS                       &kp EQUAL      &kp N      &kp M  &kp COMMA  &kp DOT  &kp SEMICOLON
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 3 LANGUAGE_2  &lt 2 SPACE  &lt_to_layer_0 1 LANGUAGE_1    &kp BACKSPACE  &kp ENTER                             &kp SLASH
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp ESC   &kp F9  &kp F10            &kp F11  &kp F12                      &trans    &kp LEFT_ARROW  &kp UP_ARROW          &kp RIGHT_ARROW        &trans
&kp HOME  &kp F5  &kp F6             &kp F7   &kp F8   &trans    &trans    &trans    &mkp MB1        &kp DOWN_ARROW        &mkp MB2               &mkp MCLK
&kp END   &kp F1  &kp F2             &kp F3   &kp F4   &trans    &trans    &trans    &trans          &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)  &trans
&trans    &trans  &lt 3 RIGHT_SHIFT  &trans   &trans   &trans    &mkp MB4  &mkp MB5                                                               &trans
            >;
        };

        NUM {
            bindings = <
&kp TAB            &kp N7        &kp N8        &kp N9        &kp N0                                                   &kp CARET        &kp AMPERSAND  &kp TILDE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH          &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))    &kp UNDERSCORE  &kp EXCLAMATION  &kp AT_SIGN    &kp HASH   &kp DOLLAR            &kp LS(PERCENT)
&mt LEFT_SHIFT N0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PERIOD    &kp EQUAL                  &kp LEFT_SHIFT  &trans           &trans         &kp LBKT   &kp RBKT              &kp BACKSLASH
&trans             &trans        &trans        &trans        &trans        &trans                     &trans          &trans                                                           &kp PIPE
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans        &trans        &trans        &trans        &trans
&trans  &none   &none   &none   &trans  &trans    &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans  &trans  &trans    &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans    &trans             &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &mkp MB1  &lt 3 RIGHT_SHIFT  &mkp MB2  &mkp MB3
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans             &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &none   &none                                          &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                          &trans
            >;
        };

        layer_7 {
            bindings = <
&kp LS(Q)  &kp LS(W)     &kp LS(E)     &kp LS(R)  &kp LS(T)                                  &kp LS(Y)  &kp LS(U)  &kp LS(I)      &kp LS(O)    &kp LS(P)
&kp LS(A)  &kp LS(S)     &kp LS(D)     &kp LS(F)  &kp LS(G)  &kp LS(LG(T))    &kp LS(MINUS)  &kp LS(H)  &kp LS(J)  &kp LS(K)      &kp LS(L)    &trans
&kp LS(Z)  &kp LS(X)     &kp LS(C)     &kp LS(V)  &kp LS(B)  &kp LS(APOS)     &kp LS(EQUAL)  &kp LS(N)  &kp LS(M)  &kp LS(COMMA)  &kp LS(DOT)  &kp LS(SEMICOLON)
&kp LCTRL  &kp LEFT_WIN  &kp LEFT_ALT  &trans     &trans     &trans           &kp BACKSPACE  &kp ENTER                                         &kp LS(SLASH)
            >;

            sensor-bindings = <&inc_dec_kp PAGE_UP PAGE_DOWN>;
        };
    };
};
